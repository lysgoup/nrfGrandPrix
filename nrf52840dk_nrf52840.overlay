// To get started, press Ctrl+Space (or Option+Esc) to bring up the completion menu and view the available nodes.

// You can also use the buttons in the sidebar to perform actions on nodes.
// Actions currently available include:

// * Enabling / disabling the node
// * Adding the bus to a bus
// * Removing the node
// * Connecting ADC channels

// For more help, browse the DeviceTree documentation at https://docs.zephyrproject.org/latest/guides/dts/index.html
// You can also visit the nRF DeviceTree extension documentation at https://nrfconnect.github.io/vscode-nrf-connect/devicetree/nrfdevicetree.html

// For JoyStick

/ {
    zephyr,user {
        io-channels = <&adc 1>, <&adc 2>;
    };

    pwmbuzzer {
        compatible = "pwm-leds";
        status = "okay";

        buzzer: buzzer_pwm {
            pwms = <&pwm0 0 PWM_MSEC(880) PWM_POLARITY_NORMAL>;
            label = "PWM_1";
        };
    };
};

&adc {
    #address-cells = <1>;
    #size-cells = <0>;

    channel@1 {
        reg = <1>;
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,acquisition-time = <ADC_ACQ_TIME_DEFAULT>;
        zephyr,input-positive = <NRF_SAADC_AIN1>; /* P0.03 */
        zephyr,resolution = <10>;
        // zephyr,differential;
    };

    channel@2 {
        reg = <2>;
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,acquisition-time = <ADC_ACQ_TIME_DEFAULT>;
        zephyr,input-positive = <NRF_SAADC_AIN2>; /* P0.04 */
        zephyr,resolution = <10>;
        // zephyr,differential;
    };
};

// For Rotary Encoder

/ {
	aliases {
		qdec0 = &qdec0;
		gpio-sw = &gpiosw;
	};

	gpiocustom{
		status = "okay";
		compatible = "gpio-keys";
		gpiosw: gpiosw {
			gpios = <&gpio1 5 (GPIO_PULL_UP)>;
			label = "gpiosw P1.05";
		};
	};
};

&pinctrl {
	qdec_pinctrl: qdec_pinctrl {
		group1 {
			psels = <NRF_PSEL(QDEC_A, 1, 4)>,   /* Arduino D3 */
				<NRF_PSEL(QDEC_B, 1, 3)>;   /* Arduino D2 */
		};
	};
};

&qdec0 {
	status = "okay";
	pinctrl-0 = <&qdec_pinctrl>;
	pinctrl-names = "default";
	steps = < 20 >;
	led-pre = < 500 >;
};

// For battery display

/ {
	aliases{
		gpio-clk = &gpioclk;
		gpio-dio = &gpiodio;
	};

	gpiocustom{
		status = "okay";
		compatible = "gpio-keys";

		gpioclk: gpioclk{
			gpios = <&gpio1 12 GPIO_ACTIVE_HIGH>;
			label = "gpioclk P1.12";
		};

		gpiodio: gpiodio{
			gpios = <&gpio1 13 GPIO_ACTIVE_HIGH>;
			label = "gpiodio P1.13";
		};
	};
};

&spi3 {
	status = "disabled";
};

// For LED Matrix


&i2c0 {
	clock-frequency = <I2C_BITRATE_STANDARD>;

	ht16k33@70 {
		compatible = "holtek,ht16k33";
		reg = <0x70>;
                /* Uncomment to use IRQ instead of polling: */
		/* irq-gpios = <&gpio1 8 (GPIO_PULL_UP | GPIO_ACTIVE_LOW)>; */

		keyscan {
			compatible = "holtek,ht16k33-keyscan";
		};
	};
};